const { merge } = require('webpack-merge');
const common = require('./webpack.common.js');
const FriendlyErrorsWebpackPlugin = require('@soda/friendly-errors-webpack-plugin');
const webpack = require('webpack');
const envConfig = require('../config/env.conf');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const BuildENV = envConfig.getBuildENV({
  NODE_ENV: '"development"',
  prod: '"dev"',
});
const os = require('os');

// Get local IP address
const interfaces = os.networkInterfaces();
let localIpAddress; // 本地IP
Object.keys(interfaces).forEach((interfaceName) => {
  interfaces[interfaceName].forEach((interfaceData) => {
    if (interfaceData.family === 'IPv4' && !interfaceData.internal) {
      localIpAddress = interfaceData.address;
    }
  });
});

module.exports = (RESETENV) => {
  let DEVConf;
  DEVConf = {
    devtool: 'inline-source-map', // Open source map
    mode: 'development',
    cache: {
      type: 'filesystem',
    },
    devServer: {
      host: BuildENV.host,
      port: BuildENV.port && Number(BuildENV.port),
      hot: true, // hot updates
      // inline: true, // Set to true, the page will automatically refresh when the source file changes
      // server: 'http' | 'https',
      client: {
        reconnect: false, // The number of times the client has reconnected. When true, it will attempt to reconnect infinitely. False will not attempt to connect. The number of connections is 1
        progress: false, // Display compilation progress as a percentage in the browser.
        overlay: false, //Display full screen overlay in the browser when compilation errors or warnings occur
        //overlay: {
        //    errors: true, // Error: When a compilation error or warning occurs, display full screen overlay in the browser
        //    warnings: false, // alert
        //}
      },
      /** this is the webpack5 API Proxy Object, please read the official doc**/
      proxy: [{
        context: ['/api'],
        target: BuildENV.apiURL,
        pathRewrite: { '^/api': '/api' },
      }],
      allowedHosts: 'all',
    },
    module: {
      rules: [{
        // The execution order of the parser is from bottom to top (CSS loader first, then style loader)
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
      {
        test: /\.s[ac]ss$/i,
        // eslint禁用下一行数组括号换行
        use: [
          // Generate JS strings as style nodes
          'style-loader',
          // Convert CSS to CommonJS module
          'css-loader',
          // Compile Sass into CSS
          'sass-loader'],
      },
      {
        test: /\.less$/i,
        use: [
          // compiles Less to CSS
          'style-loader',
          'css-loader',
          'less-loader'],
      }],
    },
    plugins: [
      /** Defining APP Constants **/
      new HtmlWebpackPlugin({
        template: './' + BuildENV.sysApp + '/' + BuildENV.filename,
        filename: 'index.html', // Output file name
        title: BuildENV.title,
        inject: true,
        timeStamp: new Date().valueOf(),
        minify: {
          removeComments: true,
          collapseWhitespace: true,
          removeAttributeQuotes: true,
        },
        vConsole: false,
        prod: false,
        staticURL: BuildENV.staticURL,
        webURL: BuildENV.webURL,
      }),
      /**运行成功，输出信息**/
      new FriendlyErrorsWebpackPlugin({
        compilationSuccessInfo: {
          messages: [`You application is running here http://${localIpAddress}:${BuildENV.port}`,
            `Your Localhost ip is http://localhost:${BuildENV.port}`],
          // clearConsole: true
        },
        clearConsole: true, // Do clear the console every time when compile? Default: true
        onErrors(severity, errors) {
          // You can listen for errors generated by plugin conversion and sorting
          // The error level can be set to either 'error' or 'warning'`
        },
      }),
      new webpack.DefinePlugin({
        'process.env': envConfig.getNodeENV({
          NODE_ENV: '"development"',
          prod: '"dev"',
        })
      })],
  };

  return merge(common(RESETENV), DEVConf);
};
